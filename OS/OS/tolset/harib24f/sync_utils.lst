     1 00000000                                 [FORMAT "WCOFF"]
     2 00000000                                 [INSTRSET "i486p"]
     3 00000000                                 [OPTIMIZE 1]
     4 00000000                                 [OPTION 1]
     5 00000000                                 [BITS 32]
     6 00000000                                 	EXTERN	_task_now
     7 00000000                                 	EXTERN	_io_cli
     8 00000000                                 	EXTERN	_io_sti
     9 00000000                                 	EXTERN	_io_hlt
    10 00000000                                 	EXTERN	_task_alloc
    11 00000000                                 	EXTERN	_memman_alloc_4k
    12 00000000                                 [FILE "sync_utils.c"]
    13                                          [SECTION .text]
    14 00000000                                 	GLOBAL	_avoid_sleep
    15 00000000                                 _avoid_sleep:
    16 00000000 55                              	PUSH	EBP
    17 00000001 89 E5                           	MOV	EBP,ESP
    18 00000003 E8 [00000000]                   	CALL	_task_now
    19 00000008 C7 40 04 00000002               	MOV	DWORD [4+EAX],2
    20 0000000F 5D                              	POP	EBP
    21 00000010 C3                              	RET
    22 00000011                                 	GLOBAL	_test_and_set
    23 00000011                                 _test_and_set:
    24 00000011 55                              	PUSH	EBP
    25 00000012 89 E5                           	MOV	EBP,ESP
    26 00000014 56                              	PUSH	ESI
    27 00000015 53                              	PUSH	EBX
    28 00000016 8B 5D 08                        	MOV	EBX,DWORD [8+EBP]
    29 00000019 E8 [00000000]                   	CALL	_io_cli
    30 0000001E 8B 33                           	MOV	ESI,DWORD [EBX]
    31 00000020 C7 03 000000FF                  	MOV	DWORD [EBX],255
    32 00000026 E8 [00000000]                   	CALL	_io_sti
    33 0000002B 5B                              	POP	EBX
    34 0000002C 89 F0                           	MOV	EAX,ESI
    35 0000002E 5E                              	POP	ESI
    36 0000002F 5D                              	POP	EBP
    37 00000030 C3                              	RET
    38 00000031                                 	GLOBAL	_Swap
    39 00000031                                 _Swap:
    40 00000031 55                              	PUSH	EBP
    41 00000032 89 E5                           	MOV	EBP,ESP
    42 00000034 56                              	PUSH	ESI
    43 00000035 53                              	PUSH	EBX
    44 00000036 8B 5D 08                        	MOV	EBX,DWORD [8+EBP]
    45 00000039 8B 75 0C                        	MOV	ESI,DWORD [12+EBP]
    46 0000003C E8 [00000000]                   	CALL	_io_cli
    47 00000041 8B 13                           	MOV	EDX,DWORD [EBX]
    48 00000043 8B 06                           	MOV	EAX,DWORD [ESI]
    49 00000045 89 03                           	MOV	DWORD [EBX],EAX
    50 00000047 89 16                           	MOV	DWORD [ESI],EDX
    51 00000049 5B                              	POP	EBX
    52 0000004A 5E                              	POP	ESI
    53 0000004B 5D                              	POP	EBP
    54 0000004C E9 [00000000]                   	JMP	_io_sti
    55 00000051                                 	GLOBAL	_sem_signal
    56 00000051                                 _sem_signal:
    57 00000051 55                              	PUSH	EBP
    58 00000052 89 E5                           	MOV	EBP,ESP
    59 00000054 53                              	PUSH	EBX
    60 00000055 8B 5D 08                        	MOV	EBX,DWORD [8+EBP]
    61 00000058 E8 [00000000]                   	CALL	_io_cli
    62 0000005D FF 03                           	INC	DWORD [EBX]
    63 0000005F 5B                              	POP	EBX
    64 00000060 5D                              	POP	EBP
    65 00000061 E9 [00000000]                   	JMP	_io_sti
    66 00000066                                 	GLOBAL	_sem_wait
    67 00000066                                 _sem_wait:
    68 00000066 55                              	PUSH	EBP
    69 00000067 89 E5                           	MOV	EBP,ESP
    70 00000069 53                              	PUSH	EBX
    71 0000006A 8B 5D 08                        	MOV	EBX,DWORD [8+EBP]
    72 0000006D 83 3B 00                        	CMP	DWORD [EBX],0
    73 00000070 7E 0E                           	JLE	L9
    74 00000072                                 L11:
    75 00000072 E8 [00000000]                   	CALL	_io_cli
    76 00000077 FF 0B                           	DEC	DWORD [EBX]
    77 00000079 5B                              	POP	EBX
    78 0000007A 5D                              	POP	EBP
    79 0000007B E9 [00000000]                   	JMP	_io_sti
    80 00000080                                 L9:
    81 00000080 E8 [00000000]                   	CALL	_io_hlt
    82 00000085 83 3B 00                        	CMP	DWORD [EBX],0
    83 00000088 7E F6                           	JLE	L9
    84 0000008A EB E6                           	JMP	L11
    85 0000008C                                 	GLOBAL	_create_task
    86 0000008C                                 _create_task:
    87 0000008C 55                              	PUSH	EBP
    88 0000008D 89 E5                           	MOV	EBP,ESP
    89 0000008F 53                              	PUSH	EBX
    90 00000090 E8 [00000000]                   	CALL	_task_alloc
    91 00000095 68 00010000                     	PUSH	65536
    92 0000009A FF 75 08                        	PUSH	DWORD [8+EBP]
    93 0000009D 89 C3                           	MOV	EBX,EAX
    94 0000009F E8 [00000000]                   	CALL	_memman_alloc_4k
    95 000000A4 8B 55 0C                        	MOV	EDX,DWORD [12+EBP]
    96 000000A7 89 83 000000AC                  	MOV	DWORD [172+EBX],EAX
    97 000000AD 89 53 4C                        	MOV	DWORD [76+EBX],EDX
    98 000000B0 05 0000FFF8                     	ADD	EAX,65528
    99 000000B5 8B 55 10                        	MOV	EDX,DWORD [16+EBP]
   100 000000B8 89 43 64                        	MOV	DWORD [100+EBX],EAX
   101 000000BB C7 43 74 00000008               	MOV	DWORD [116+EBX],8
   102 000000C2 C7 43 78 00000010               	MOV	DWORD [120+EBX],16
   103 000000C9 C7 43 7C 00000008               	MOV	DWORD [124+EBX],8
   104 000000D0 C7 83 00000080 00000008         	MOV	DWORD [128+EBX],8
   105 000000DA C7 83 00000084 00000008         	MOV	DWORD [132+EBX],8
   106 000000E4 C7 83 00000088 00000008         	MOV	DWORD [136+EBX],8
   107 000000EE 89 50 04                        	MOV	DWORD [4+EAX],EDX
   108 000000F1 89 D8                           	MOV	EAX,EBX
   109 000000F3 8B 5D FC                        	MOV	EBX,DWORD [-4+EBP]
   110 000000F6 C9                              	LEAVE
   111 000000F7 C3                              	RET
